/*
--
This file is automatically generated. Any manual changes to this file may be overwritten.
It includes routes and handlers by the Gleece API Routes Generator.
--
Authors: Haim Kastner & Yuval Pomerchik
Generated by: Gleece Routes Generator
Generated Date: 04 Feb 25 08:27 IST
--
Usage:
Refer to the Gleece documentation for details on how to use the generated routes and handlers.
--
Repository: https://github.com/gopher-fleece/gleece
--
*/
package routes
import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/textproto"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	"github.com/gopher-fleece/gleece/external"
	"github.com/gopher-fleece/gleece/infrastructure/validation"
	RequestAuth "github.com/gopher-fleece/gleecexample/security"
	Param7domicile "github.com/gopher-fleece/gleecexample/controllers"
	UsersControllerImport "github.com/gopher-fleece/gleecexample/controllers"
	CustomValidatorPkg0 "github.com/gopher-fleece/gleecexample/validators"
	MiddlewarePkg0 "github.com/gopher-fleece/gleecexample/middlewares"
	MiddlewarePkg1 "github.com/gopher-fleece/gleecexample/middlewares"
	MiddlewarePkg2 "github.com/gopher-fleece/gleecexample/middlewares"
)
var validatorInstance *validator.Validate
var urlParamRegex *regexp.Regexp
type SecurityListRelation string
const (
	SecurityListRelationAnd SecurityListRelation = "AND"
)
type SecurityCheckList struct {
	Checks   []external.SecurityCheck
	Relation SecurityListRelation
}
func getStatusCode(controller external.Controller, hasReturnValue bool, err error) int {
	if controller.GetStatus() != nil {
		return int(*controller.GetStatus())
	}
	if err != nil {
		return http.StatusInternalServerError
	}
	if hasReturnValue {
		return http.StatusOK
	}
	return http.StatusNoContent
}
func bindAndValidateBody[TOutput any](ctx *gin.Context, contentType string, validation string, output **TOutput) error {
	var err error
	bodyBytes, err := io.ReadAll(ctx.Request.Body)
	if err != nil || len(bodyBytes) == 0 {
		if strings.Contains(validation, "required") {
			return fmt.Errorf("body is required but was not provided")
		}
		return nil
	}
	var deserializedOutput TOutput
	switch contentType {
	case "application/json":
		err = json.Unmarshal(bodyBytes, &deserializedOutput)
	default:
		return fmt.Errorf("content-type %s is not currently supported by the validation subsystem", contentType)
	}
	if err != nil {
		return err
	}
	if err = validatorInstance.Struct(&deserializedOutput); err != nil {
		return err
	}
	*output = &deserializedOutput
	return nil
}
func toGinUrl(url string) string {
	processedUrl := urlParamRegex.ReplaceAllString(url, ":$1")
	processedUrl = strings.ReplaceAll(processedUrl, "//", "/")
	if processedUrl == "" {
		return "/"
	}
	if !strings.HasPrefix(processedUrl, "/") {
		processedUrl = "/" + processedUrl
	}
	return processedUrl
}
func authorize(ctx *gin.Context, checksLists []SecurityCheckList) *external.SecurityError {
	var lastError *external.SecurityError
	for _, list := range checksLists {
		if list.Relation != SecurityListRelationAnd {
			panic(
				"Encountered a security list relation of type '%s' - this is unexpected and indicates a bug in Gleece itself." +
					"Please open an issue at https://github.com/gopher-fleece/gleece/issues",
			)
		}
		// Iterate over each security list
		encounteredErrorInList := false
		for _, check := range list.Checks {
			secErr := RequestAuth.GleeceRequestAuthorization(ctx, check)
			if secErr != nil {
				lastError = secErr
				encounteredErrorInList = true
				break
			}
		}
		// If no error was encountered, validation is considered successful
		// otherwise, we continue over to the next iteration whilst keeping track of the last error
		if !encounteredErrorInList {
			return nil
		}
	}
	// If we got here it means authentication has failed
	return lastError
}
func handleAuthorizationError(ctx *gin.Context, authErr *external.SecurityError, operationId string) {
	statusCode := int(authErr.StatusCode)
	if authErr.CustomError != nil {
		// For now, we support JSON only
		ctx.JSON(statusCode, authErr.CustomError.Payload)
		return
	}
	stdError := external.Rfc7807Error{
		Type:     http.StatusText(statusCode),
		Detail:   authErr.Message,
		Status:   statusCode,
		Instance: "/gleece/authorization/error/" + operationId,
	}
	ctx.JSON(statusCode, stdError)
}
func wrapValidatorError(validatorErr error, operationId string, fieldName string) external.Rfc7807Error {
	return external.Rfc7807Error{
		Type: http.StatusText(http.StatusUnprocessableEntity),
		Detail: fmt.Sprintf(
			"A request was made to operation '%s' but parameter '%s' did not pass validation - %s",
			operationId,
			fieldName,
			validation.ExtractValidationErrorMessage(validatorErr, &fieldName),
		),
		Status:   http.StatusUnprocessableEntity,
		Instance: fmt.Sprintf("/gleece/validation/error/%s", operationId),
	}
}
func RegisterRoutes(engine *gin.Engine) {
	validatorInstance = validator.New()
	urlParamRegex = regexp.MustCompile(`\{([\w\d-_]+)\}`)
	validatorInstance.RegisterValidation("validate_starts_with_letter", func(fl validator.FieldLevel) bool {
		return CustomValidatorPkg0.ValidateStartsWithLetter(fl)
	})
	// UsersController
	engine.POST(toGinUrl("/users/user/{user_name}/{user_id}/{serial}"), func(ctx *gin.Context) {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"read:users",
								"write:users",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(ctx, authErr, "CreateNewUser")
			return
		}
		controller := UsersControllerImport.UsersController{}
		controller.InitController(ctx)
		var conversionErr error
		var idRawPtr *int = nil
		idRaw, isidExists := ctx.Params.Get("user_id")
		if isidExists {
			idUint64, conversionErr := strconv.Atoi(idRaw)
			if conversionErr != nil {
				validationError := external.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'CreateNewUser' but parameter '%s' was not properly sent - Expected %s but got %s",
						"id",
						"int",
						reflect.TypeOf(idRaw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/gleece/validation/error/CreateNewUser",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				ctx.JSON(http.StatusUnprocessableEntity, validationError)
				return
			}
			id := int(idUint64)
			idRawPtr = &id
		}
		if validatorErr := validatorInstance.Var(idRawPtr, "gt=1,required"); validatorErr != nil {
			fieldName := "id"
			validationError := wrapValidatorError(validatorErr, "CreateNewUser", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		var serialRawPtr *int = nil
		serialRaw, isserialExists := ctx.Params.Get("serial")
		if isserialExists {
			serialUint64, conversionErr := strconv.Atoi(serialRaw)
			if conversionErr != nil {
				validationError := external.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'CreateNewUser' but parameter '%s' was not properly sent - Expected %s but got %s",
						"serial",
						"int",
						reflect.TypeOf(serialRaw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/gleece/validation/error/CreateNewUser",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				ctx.JSON(http.StatusUnprocessableEntity, validationError)
				return
			}
			serial := int(serialUint64)
			serialRawPtr = &serial
		}
		if validatorErr := validatorInstance.Var(serialRawPtr, "gte=10,required"); validatorErr != nil {
			fieldName := "serial"
			validationError := wrapValidatorError(validatorErr, "CreateNewUser", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		var emailRawPtr *string = nil
		emailRaw, isemailExists := ctx.GetQuery("email")
		if isemailExists {
			email := emailRaw
			emailRawPtr = &email
		}
		if validatorErr := validatorInstance.Var(emailRawPtr, "required,email"); validatorErr != nil {
			fieldName := "email"
			validationError := wrapValidatorError(validatorErr, "CreateNewUser", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		var nameRawPtr *string = nil
		nameRaw, isnameExists := ctx.Params.Get("user_name")
		if isnameExists {
			name := nameRaw
			nameRawPtr = &name
		}
		if validatorErr := validatorInstance.Var(nameRawPtr, "required"); validatorErr != nil {
			fieldName := "name"
			validationError := wrapValidatorError(validatorErr, "CreateNewUser", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		var originRawPtr *string = nil
		originRaw := ctx.GetHeader("x-origin")
		_, isoriginExists := ctx.Request.Header[textproto.CanonicalMIMEHeaderKey("x-origin")]
		if isoriginExists {
			origin := originRaw
			originRawPtr = &origin
		}
		if validatorErr := validatorInstance.Var(originRawPtr, "validate_starts_with_letter,required"); validatorErr != nil {
			fieldName := "origin"
			validationError := wrapValidatorError(validatorErr, "CreateNewUser", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		var optionRawPtr *string = nil
		optionRaw := ctx.GetHeader("x-option")
		_, isoptionExists := ctx.Request.Header[textproto.CanonicalMIMEHeaderKey("x-option")]
		if isoptionExists {
			option := optionRaw
			optionRawPtr = &option
		}
		var traceRawPtr *string = nil
		traceRaw := ctx.GetHeader("trace")
		_, istraceExists := ctx.Request.Header[textproto.CanonicalMIMEHeaderKey("trace")]
		if istraceExists {
			trace := traceRaw
			traceRawPtr = &trace
		}
		if validatorErr := validatorInstance.Var(traceRawPtr, "required"); validatorErr != nil {
			fieldName := "trace"
			validationError := wrapValidatorError(validatorErr, "CreateNewUser", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		var domicileRawPtr *Param7domicile.Domicile = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "required", &domicileRawPtr)
		if conversionErr != nil {
			validationError := external.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'CreateNewUser' but body parameter '%s' did not pass validation of '%s' - %s",
					"domicile",
					"Domicile",
					validation.ExtractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/CreateNewUser",
			}
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		if continueOperation := MiddlewarePkg0.LogBeforeOperationMiddleware(ctx); continueOperation == false {
			return
		}
		value, opError := controller.CreateNewUser(*idRawPtr, *serialRawPtr, *emailRawPtr, *nameRawPtr, *originRawPtr, optionRawPtr, *traceRawPtr, *domicileRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Header(key, value)
		}
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.LogAfterOperationSuccessMiddleware(ctx); continueOperation == false {
				return
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.LogOnErrorMiddleware(ctx, opError); continueOperation == false {
				return
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'CreateNewUser'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/CreateNewUser",
				Extensions: map[string]string{"error": opError.Error()},
			}
			ctx.JSON(statusCode, stdError)
			return
		}
		ctx.JSON(statusCode, value)
	})
	engine.GET(toGinUrl("/users/domicile/{id}"), func(ctx *gin.Context) {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"read:users",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"read:all_data",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(ctx, authErr, "GetUserDomicile")
			return
		}
		controller := UsersControllerImport.UsersController{}
		controller.InitController(ctx)
		var idRawPtr *string = nil
		idRaw, isidExists := ctx.Params.Get("id")
		if isidExists {
			id := idRaw
			idRawPtr = &id
		}
		if validatorErr := validatorInstance.Var(idRawPtr, "required"); validatorErr != nil {
			fieldName := "id"
			validationError := wrapValidatorError(validatorErr, "GetUserDomicile", fieldName)
			ctx.JSON(http.StatusUnprocessableEntity, validationError)
			return
		}
		if continueOperation := MiddlewarePkg0.LogBeforeOperationMiddleware(ctx); continueOperation == false {
			return
		}
		value, opError := controller.GetUserDomicile(*idRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Header(key, value)
		}
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.LogAfterOperationSuccessMiddleware(ctx); continueOperation == false {
				return
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.LogOnErrorMiddleware(ctx, opError); continueOperation == false {
				return
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetUserDomicile'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetUserDomicile",
				Extensions: map[string]string{"error": opError.Error()},
			}
			ctx.JSON(statusCode, stdError)
			return
		}
		ctx.JSON(statusCode, value)
	})
}
